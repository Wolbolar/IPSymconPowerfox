<?php
declare(strict_types=1);

require_once __DIR__ . '/../libs/ProfileHelper.php';

class poweropti extends IPSModule
{
    use ProfileHelper;

    private const PICTURE_LOGO_POWERFOX = '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';
    private const NO_TYPE_STORED = '-1';
    private const ELECTRICITY_METER = '0';
    private const COLD_WATER_METER = '1';
    private const HOT_WATER_METER = '2';
    private const HEAT_METER = '3';
    private const GAS_METER = '4';
    private const COLD_AND_HOT_WATER_METER = '5';
    private int $position = 0;

    public function Create()
    {
        //Never delete this line!
        parent::Create();

        $this->ConnectParent('{47E17935-CBB5-02B3-BAA3-7CD681898DBC}');
        $this->RegisterPropertyString('DeviceId', '');
        $this->RegisterPropertyInteger('AccountAssociatedSince', 0);
        $this->RegisterPropertyBoolean('MainDevice', false);
        $this->RegisterPropertyString('Division', '');
        $this->RegisterPropertyString('description', '');
        $this->RegisterAttributeFloat('Power', 0);
        $this->RegisterAttributeBoolean('Power_enabled', false);
        $this->RegisterAttributeInteger('Timestamp', 0);
        $this->RegisterAttributeBoolean('Timestamp_enabled', false);
        $this->RegisterAttributeFloat('A_Plus', 0);
        $this->RegisterAttributeBoolean('A_Plus_enabled', false);
        $this->RegisterAttributeFloat('A_Minus', 0);
        $this->RegisterAttributeBoolean('A_Minus_enabled', false);
        $this->RegisterAttributeBoolean('Bidirectional_counter', false);
        $this->RegisterAttributeBoolean('Bidirectional_counter_enabled', false);
        $this->RegisterAttributeBoolean('feed_in_electricity', false);
        $this->RegisterAttributeBoolean('feed_in_electricity_enabled', false);


        $this->RegisterPropertyInteger('updateinterval', 3);

        $this->RegisterTimer('PowerfoxUpdate', 0, 'PF_UpdateStatus(' . $this->InstanceID . ');');

        //we will wait until the kernel is ready
        $this->RegisterMessage(0, IPS_KERNELMESSAGE);
    }

    public function Destroy()
    {
        //Never delete this line!
        parent::Destroy();
    }

    public function MessageSink($TimeStamp, $SenderID, $Message, $Data)
    {
        switch ($Message) {
            case IM_CHANGESTATUS:
                if ($Data[0] === IS_ACTIVE) {
                    $this->ApplyChanges();
                }
                break;

            case IPS_KERNELMESSAGE:
                if ($Data[0] === KR_READY) {
                    $this->ApplyChanges();
                }
                break;

            default:
                break;
        }
    }

    public function ApplyChanges()
    {
        //Never delete this line!
        parent::ApplyChanges();

        if (IPS_GetKernelRunlevel() !== KR_READY) {
            return;
        }

        $this->ValidateConfiguration();
    }

    private function ValidateConfiguration()
    {
        $device_id = $this->ReadPropertyString('DeviceId');
        if ($device_id == '') {
            $this->SetStatus(205);
        } elseif ($device_id != '') {
            $this->SetReceiveDataFilter(".*" . $device_id . ".*");
            $this->RegisterVariables();
            $this->SetPowerfoxInterval();
            $this->SetStatus(IS_ACTIVE);
        }
    }

    /** @noinspection PhpMissingParentCallCommonInspection */

    private function RegisterVariables(): void
    {
        $division = $this->ReadPropertyString('Division');
        if($division == self::ELECTRICITY_METER)
        {
            $this->RegisterProfile('Powerfox.Power', 'Electricity', '', ' W', 0, 5000, 10, 0, VARIABLETYPE_FLOAT);
            $this->SetupVariable(
                'Power', $this->Translate('Power'), 'Powerfox.Power', $this->_getPosition(), VARIABLETYPE_FLOAT, false, true
            );
            $bidirectional_counter = $this->ReadAttributeBoolean('Bidirectional_counter_enabled');
            if($bidirectional_counter)
            {
                $this->SetupVariable(
                    'feed_in_electricity', $this->Translate('feed-in electricity'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, false, false
                );
            }
            $this->SetupVariable(
                'Timestamp', $this->Translate('Timestamp'), '~UnixTimestamp', $this->_getPosition(), VARIABLETYPE_INTEGER, false, false
            );
            $this->SetupVariable(
                'A_Plus', $this->Translate('A Plus'), 'Powerfox.Power', $this->_getPosition(), VARIABLETYPE_FLOAT, false, false
            );
            $this->SetupVariable(
                'A_Minus', $this->Translate('A Minus'), 'Powerfox.Power', $this->_getPosition(), VARIABLETYPE_FLOAT, false, false
            );
        }
        if($division == self::COLD_WATER_METER)
        {
            // todo
            $this->RegisterProfile('Powerfox.Volume', 'Drops', '', '', 0, 5000, 10, 0, VARIABLETYPE_FLOAT);
            $this->SetupVariable(
                'Volume', $this->Translate('Volume'), 'Powerfox.Volume', $this->_getPosition(), VARIABLETYPE_FLOAT, false, true
            );
        }
        if($division == self::HOT_WATER_METER)
        {
            // todo
            $this->RegisterProfile('Powerfox.Volume', 'Drops', '', '', 0, 5000, 10, 0, VARIABLETYPE_FLOAT);
            $this->SetupVariable(
                'Volume', $this->Translate('Volume'), 'Powerfox.Volume', $this->_getPosition(), VARIABLETYPE_FLOAT, false, true
            );
        }
        if($division == self::HEAT_METER)
        {
            // todo
            $this->RegisterProfile('Powerfox.Volume', 'Drops', '', '', 0, 5000, 10, 0, VARIABLETYPE_FLOAT);
            $this->SetupVariable(
                'Volume', $this->Translate('Volume'), 'Powerfox.Volume', $this->_getPosition(), VARIABLETYPE_FLOAT, false, true
            );
        }
        if($division == self::GAS_METER)
        {
            // todo
            $this->RegisterProfile('Powerfox.Volume', 'Drops', '', '', 0, 5000, 10, 0, VARIABLETYPE_FLOAT);
            $this->SetupVariable(
                'Volume', $this->Translate('Volume'), 'Powerfox.Volume', $this->_getPosition(), VARIABLETYPE_FLOAT, false, true
            );
        }
        if($division == self::COLD_AND_HOT_WATER_METER)
        {
            // todo
            $this->RegisterProfile('Powerfox.Volume', 'Drops', '', '', 0, 5000, 10, 0, VARIABLETYPE_FLOAT);
            $this->SetupVariable(
                'Volume', $this->Translate('Volume'), 'Powerfox.Volume', $this->_getPosition(), VARIABLETYPE_FLOAT, false, true
            );
        }
    }

    /** Variable anlegen / löschen
     *
     * @param $ident
     * @param $name
     * @param $profile
     * @param $position
     * @param $vartype
     * @param $enableaction
     * @param bool $visible
     *
     * @return bool|int
     */
    protected function SetupVariable($ident, $name, $profile, $position, $vartype, $enableaction, $visible = false)
    {
        $objid = false;
        if ($visible) {
            $this->SendDebug('powerfox Variable:', 'Variable with Ident ' . $ident . ' is visible', 0);
        } else {
            $visible = $this->ReadAttributeBoolean($ident . '_enabled');
            $this->SendDebug('powerfox Variable:', 'Variable with Ident ' . $ident . ' is shown ' . print_r($visible, true), 0);
        }
        if ($visible == true) {
            switch ($vartype) {
                case VARIABLETYPE_BOOLEAN:
                    $objid = $this->RegisterVariableBoolean($ident, $name, $profile, $position);
                    $value = $this->ReadAttributeBoolean($ident);
                    break;
                case VARIABLETYPE_INTEGER:
                    $objid = $this->RegisterVariableInteger($ident, $name, $profile, $position);
                    $value = $this->ReadAttributeInteger($ident);
                    break;
                case VARIABLETYPE_FLOAT:
                    $objid = $this->RegisterVariableFloat($ident, $name, $profile, $position);
                    $value = $this->ReadAttributeFloat($ident);
                    break;
                case VARIABLETYPE_STRING:
                    $objid = $this->RegisterVariableString($ident, $name, $profile, $position);
                    $value = $this->ReadAttributeString($ident);
                    break;
            }
            $this->SetValue($ident, $value);
            if ($enableaction) {
                $this->EnableAction($ident);
            }
        } else {
            $objid = @$this->GetIDForIdent($ident);
            if ($objid > 0) {
                $this->SendDebug('powerfox Variable:', 'Variable with Ident ' . $ident . ' is not shown, delelete variable', 0);
                $this->UnregisterVariable($ident);
            }
        }
        return $objid;
    }

    private function WriteValues()
    {
        $division = $this->ReadPropertyString('Division');
        if($division == self::ELECTRICITY_METER)
        {
            $this->WriteEnabledValue('Power', VARIABLETYPE_FLOAT);
            $this->WriteEnabledValue('Timestamp', VARIABLETYPE_INTEGER);
            $this->WriteEnabledValue('A_Plus', VARIABLETYPE_FLOAT);
            $this->WriteEnabledValue('A_Minus', VARIABLETYPE_FLOAT);
            $this->WriteEnabledValue('feed_in_electricity', VARIABLETYPE_BOOLEAN);
        }
        if($division == self::COLD_WATER_METER)
        {
            $this->WriteEnabledValue('Volume', VARIABLETYPE_FLOAT);
        }
        if($division == self::HOT_WATER_METER)
        {
            $this->WriteEnabledValue('Volume', VARIABLETYPE_FLOAT);
        }
        if($division == self::HEAT_METER)
        {
            $this->WriteEnabledValue('Volume', VARIABLETYPE_FLOAT);
        }
        if($division == self::GAS_METER)
        {
            $this->WriteEnabledValue('Volume', VARIABLETYPE_FLOAT);
        }
        if($division == self::COLD_AND_HOT_WATER_METER)
        {
            $this->WriteEnabledValue('Volume', VARIABLETYPE_FLOAT);
        }
    }

    private function WriteEnabledValue($ident, $vartype, $enabled = false)
    {
        if ($enabled) {
            $value_enabled = true;
        } else {
            $value_enabled = $this->ReadAttributeBoolean($ident . '_enabled');
        }

        if ($value_enabled) {
            switch ($vartype) {
                case VARIABLETYPE_BOOLEAN:
                    $value = $this->ReadAttributeBoolean($ident);
                    $debug_value = strval($value);
                    $this->SendDebug('SetValue boolean', 'ident: ' . $ident . ' value: ' . $debug_value, 0);
                    $this->SetVariableValue($ident, $value);
                    break;
                case VARIABLETYPE_INTEGER:
                    $value = $this->ReadAttributeInteger($ident);
                    $this->SendDebug('SetValue integer', 'ident: ' . $ident . ' value: ' . $value, 0);
                    $this->SetVariableValue($ident, $value);
                    break;
                case VARIABLETYPE_FLOAT:
                    $value = $this->ReadAttributeFloat($ident);
                    $this->SendDebug('SetValue float', 'ident: ' . $ident . ' value: ' . $value, 0);
                    $this->SetVariableValue($ident, $value);
                    break;
                case VARIABLETYPE_STRING:
                    $value = $this->ReadAttributeString($ident);
                    $this->SendDebug('SetValue string', 'ident: ' . $ident . ' value: ' . $value, 0);
                    $this->SetVariableValue($ident, $value);
                    break;
            }
        }
    }

    private function SetVariableValue($ident, $value)
    {
        if (@$this->GetIDForIdent($ident)) {
            $this->SetValue($ident, $value);
        }
    }



    /** Update Device State
     *
     * @return bool
     */
    public function UpdateStatus(): bool
    {
        $this->GetCurrentData();

        return true;
    }

    private function SetPowerfoxInterval(): void
    {
        $powerfoxinterval = $this->ReadPropertyInteger('updateinterval');
        $interval = $powerfoxinterval * 1000;
        $this->SetTimerInterval('PowerfoxUpdate', $interval);
    }

    public function GetCurrentData()
    {
        $device_id = $this->ReadPropertyString('DeviceId');
        $data = $this->SendCommand('GetCurrentData', $device_id);
        $this->SendDebug('Current Data:', $data, 0);
        $data = json_decode($data, true);
        $power = $data['Watt'];
        $this->WriteAttributeFloat('Power', $power);
        if($power < -100)
        {
            $this->WriteAttributeBoolean('feed_in_electricity', true);
        }
        else
        {
            $this->WriteAttributeBoolean('feed_in_electricity', false);
        }
        $power = $data['Timestamp'];
        $this->WriteAttributeInteger('Timestamp', $power);
        $power = $data['A_Plus'];
        $this->WriteAttributeFloat('A_Plus', $power);
        $power = $data['A_Minus'];
        $this->WriteAttributeFloat('A_Minus', $power);
        $this->WriteValues();
        return $data;
    }

    public function GetHistory()
    {
        $device_id = $this->ReadPropertyString('DeviceId');
        $data = $this->SendCommand('GetHistory', $device_id);
        $this->SendDebug('History:', $data, 0);
        return $data;
    }

    public function GetHistoryDevice()
    {
        $device_id = $this->ReadPropertyString('DeviceId');
        $data = $this->SendCommand('GetHistoryDevice', $device_id);
        $this->SendDebug('History:', $data, 0);
        return $data;
    }

    public function GetHistoryDeviceCSV()
    {
        $device_id = $this->ReadPropertyString('DeviceId');
        $data = $this->SendCommand('GetHistoryDeviceCSV', $device_id);
        $this->SendDebug('History:', $data, 0);
        return $data;
    }

    /** Historische Leistung
     * Abfrage der historischen Wirkleistung der letzten Stunde ab Abfrage für konkretes Gerät
     * @return bool|string
     */
    public function GetPowerHistory()
    {
        $device_id = $this->ReadPropertyString('DeviceId');
        $data = $this->SendCommand('GetPowerHistory', $device_id);
        $this->SendDebug('History:', $data, 0);
        return $data;
    }

    /** Historische Leistung als CSV
     * Für ein einzelnes Gerät können die Daten auch als CSV heruntergeladen werden
     * Die CSV enthält die Leistungswerte für die letzten 7 Tage
     * @return bool|string
     */
    public function GetPowerHistoryCSV()
    {
        $device_id = $this->ReadPropertyString('DeviceId');
        $data = $this->SendCommand('GetPowerHistoryCSV', $device_id);
        $this->SendDebug('History:', $data, 0);
        return $data;
    }

    /** Historische Werte für bestimmte Zeiträume
     * @param int|null $year XXXX liefert die Monatswerte für das angegebene Jahr (XXXX) (vom 1.1. oder vom Aktivierungsstartpunkt bis zum heutigen Tag oder bis zum 31.12.)
     * @param int|null $month YY liefert die Tageswerte für das angegebene Jahr (XXXX) und den Monat (YY) (vom 1. bis zum Letzten des Monats)
     * @param int|null $day ZZ liefert die Stundenwerte für das konkrete Datum (von 0 Uhr lokaler Zeit bis 23:59 lokaler Zeit)
     * @param int|null $fromhour WW liefert die Viertelstundenwerte ab angegebenen Zeitpunkt für 6 Stunden (also 24 Werte). Z.B. fromHour=6, dann werden Werte von 6:00 bis 11:59 geliefert
     * Sollte eine Abfrage nicht die richtige Kombination aus Parametern enthalten z.B. nur Tag und Jahr sind angegeben, tritt der Standardfall ein → letzten 24 Stundenwerte ab Abruf
     * @return bool|string
     */
    public function GetHistoryInterval(int $year = null, int $month = null, int $day = null, int $fromhour = null)
    {
        $device_id = $this->ReadPropertyString('DeviceId');
        $data = $this->SendCommand('GetHistoryInterval', $device_id);
        $this->SendDebug('History:', $data, 0);
        return $data;
    }

    /** Historische Werte für bestimmte Zeiträume eines Geräts
     * @param string $device_id
     * @param int|null $year XXXX liefert die Monatswerte für das angegebene Jahr (XXXX) (vom 1.1. oder vom Aktivierungsstartpunkt bis zum heutigen Tag oder bis zum 31.12.)
     * @param int|null $month YY liefert die Tageswerte für das angegebene Jahr (XXXX) und den Monat (YY) (vom 1. bis zum Letzten des Monats)
     * @param int|null $day ZZ liefert die Stundenwerte für das konkrete Datum (von 0 Uhr lokaler Zeit bis 23:59 lokaler Zeit)
     * @param int|null $fromhour WW liefert die Viertelstundenwerte ab angegebenen Zeitpunkt für 6 Stunden (also 24 Werte). Z.B. fromHour=6, dann werden Werte von 6:00 bis 11:59 geliefert
     * Sollte eine Abfrage nicht die richtige Kombination aus Parametern enthalten z.B. nur Tag und Jahr sind angegeben, tritt der Standardfall ein → letzten 24 Stundenwerte ab Abruf
     * @return bool|string
     */
    public function GetHistoryDeviceInterval(int $year = null, int $month = null, int $day = null, int $fromhour = null)
    {
        $device_id = $this->ReadPropertyString('DeviceId');
        $parameter = [
            'year' => $year,
            'month' => $month,
            'day' => $day,
            'fromhour' => $fromhour
        ];

        $data = $this->SendCommand('GetHistoryDeviceInterval', $device_id, $parameter);
        $this->SendDebug('History:', $data, 0);
        return $data;
    }

    private function SendCommand(string $method, string $device_id, array $parameter = [])
    {
        $result = $this->SendDataToParent(json_encode([
            'DataID' => '{52F711EB-D83C-2969-9081-206A6B3305A8}',
            'method' => $method,
            'device_id' => $device_id,
            'parameter' => $parameter
        ]));
        return $result;
    }

    public function ReceiveData($JSONString)
    {
        $this->SendDebug('Receive data:', $JSONString, 0);
        $data = json_decode($JSONString);
        // IPS_LogMessage('Device RECV', utf8_decode($data->Buffer));

        $buffer = $data->Buffer;
        $this->SendDebug('Receive Data', $buffer, 0);
        if ($buffer != '[]') {
            // $this->CheckDeviceData($snapshot);
        }
    }

    public function SetWebFrontVariable(string $ident, bool $value)
    {
        $this->WriteAttributeBoolean($ident, $value);
        if ($value) {
            $this->SendDebug('powerfox Webfront Variable', $ident . ' enabled', 0);
        } else {
            $this->SendDebug('powerfox Webfront Variable', $ident . ' disabled', 0);
        }

        $this->RegisterVariables();
    }

    public function SetBidirectional_counter(bool $value)
    {
        $this->WriteAttributeBoolean('Bidirectional_counter_enabled', $value);
        if ($value) {
            $this->SendDebug('powerfox bidirectional counter', 'enabled', 0);
        } else {
            $this->SendDebug('powerfox bidirectional counter', 'disabled', 0);
            $this->WriteAttributeBoolean('feed_in_electricity', false);
        }
        $this->RegisterVariables();
    }

    /**
     * build configuration form
     * @return string
     */
    public function GetConfigurationForm()
    {
        // return current form
        $Form = json_encode([
            'elements' => $this->FormHead(),
            'actions' => $this->FormActions(),
            'status' => $this->FormStatus()
        ]);
        $this->SendDebug('FORM', $Form, 0);
        $this->SendDebug('FORM', json_last_error_msg(), 0);
        return $Form;
    }

    /**
     * return form configurations on configuration step
     * @return array
     */
    protected function FormHead()
    {
        $form = [
            [
                'type' => 'Image',
                'image' => 'data:image/png;base64, ' . self::PICTURE_LOGO_POWERFOX]
        ];
        return $form;
    }

    /**
     * return form actions by token
     * @return array
     */
    protected function FormActions()
    {
        //Check IO availability
        $ids = IPS_GetInstanceListByModuleID('{47E17935-CBB5-02B3-BAA3-7CD681898DBC}');
        if (IPS_GetInstance($ids[0])['InstanceStatus'] != IS_ACTIVE) {
            $visibility_label1 = true;
            $visibility_label2 = false;
        } else {
            $visibility_label1 = false;
            $visibility_label2 = true;
        }
        $Bidirectional_counter = $this->ReadAttributeBoolean('Bidirectional_counter_enabled');
        $form = [
            [
                'type' => 'Label',
                'visible' => $visibility_label1,
                'caption' => 'Error: Powerfox IO is not active!'
            ],
            [
                'type' => 'Label',
                'visible' => $visibility_label2,
                'caption' => 'Status: Power IO is OK!'
            ],
            [
                'name' => 'Timestamp_enabled',
                'type' => 'CheckBox',
                'caption' => $this->Translate('Timestamp'),
                'visible' => true,
                'value' => $this->ReadAttributeBoolean('Timestamp_enabled'),
                'onChange' => 'PF_SetWebFrontVariable($id, "Timestamp_enabled", $Timestamp_enabled);'],
            [
                'name' => 'A_Plus_enabled',
                'type' => 'CheckBox',
                'caption' => $this->Translate('A Plus'),
                'visible' => true,
                'value' => $this->ReadAttributeBoolean('A_Plus_enabled'),
                'onChange' => 'PF_SetWebFrontVariable($id, "A_Plus_enabled", $A_Plus_enabled);'],
            [
                'name' => 'A_Minus_enabled',
                'type' => 'CheckBox',
                'caption' => $this->Translate('A Minus'),
                'visible' => true,
                'value' => $this->ReadAttributeBoolean('A_Minus_enabled'),
                'onChange' => 'PF_SetWebFrontVariable($id, "A_Minus_enabled", $A_Minus_enabled);'],
            [
                'name' => 'Bidirectional_counter_enabled',
                'type' => 'CheckBox',
                'caption' => $this->Translate('Bidirectional counter'),
                'visible' => true,
                'value' => $this->ReadAttributeBoolean('Bidirectional_counter_enabled'),
                'onChange' => 'PF_SetBidirectional_counter($id, $Bidirectional_counter_enabled);'],
            [
                'name' => 'feed_in_electricity_enabled',
                'type' => 'CheckBox',
                'caption' => $this->Translate('feed-in electricity'),
                'visible' => $Bidirectional_counter,
                'value' => $this->ReadAttributeBoolean('feed_in_electricity_enabled'),
                'onChange' => 'PF_SetWebFrontVariable($id, "feed_in_electricity_enabled", $feed_in_electricity_enabled);']
        ];
        return $form;
    }

    /**
     * return from status
     * @return array
     */
    protected function FormStatus()
    {
        $form = [
            [
                'code' => IS_CREATING,
                'icon' => 'inactive',
                'caption' => 'Creating instance.'
            ],
            [
                'code' => IS_ACTIVE,
                'icon' => 'active',
                'caption' => 'configuration valid.'
            ],
            [
                'code' => IS_INACTIVE,
                'icon' => 'inactive',
                'caption' => 'interface closed.'
            ],
            [
                'code' => 201,
                'icon' => 'inactive',
                'caption' => 'Please follow the instructions.'
            ],
            [
                'code' => 202,
                'icon' => 'error',
                'caption' => 'no category selected.'
            ]
        ];

        return $form;
    }
}